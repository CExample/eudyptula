From 6eeac976907a8a088a2d4271fccf0b029badf0c9 Mon Sep 17 00:00:00 2001
Message-Id: <6eeac976907a8a088a2d4271fccf0b029badf0c9.1490612480.git.sinedoke@gmail.com>
In-Reply-To: <cover.1490612480.git.sinedoke@gmail.com>
References: <cover.1490612480.git.sinedoke@gmail.com>
From: Luis Oliveira <lolivei@synopsys.com>
Date: Thu, 2 Mar 2017 18:19:18 +0000
Subject: [5c39dda5ea83] [PATCH 02/02] Task 08: add foo file

Signed-off-by: Luis Oliveira <lolivei@synopsys.com>
---
 task_8/hello.c | 52 +++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 51 insertions(+), 1 deletion(-)

diff --git a/task_8/hello.c b/task_8/hello.c
index 00c05bc..8d3c6a0 100644
--- a/task_8/hello.c
+++ b/task_8/hello.c
@@ -4,12 +4,45 @@
 #include <linux/kernel.h>
 #include <linux/miscdevice.h>
 #include <linux/module.h>
+#include <linux/mutex.h>
 #include <linux/proc_fs.h>
 #include <linux/uaccess.h>
 #include <linux/slab.h>
 #include <linux/string.h>
 
+static DEFINE_MUTEX(foo_sem);
 struct dentry * ret;
+char msg[PAGE_SIZE];
+
+static ssize_t foo_read(struct file *file, char __user *buf,
+	size_t count, loff_t *ppos)
+{
+	int ret = -EINVAL;
+
+	mutex_lock(&foo_sem);
+
+	ret = simple_read_from_buffer(buf, count, ppos, msg,
+		strlen(msg));
+
+	mutex_unlock(&foo_sem);
+
+	return ret;
+}
+
+static ssize_t foo_write(struct file *file, char const __user *buf,
+	size_t count, loff_t *ppos)
+{
+	ssize_t len;
+
+	mutex_lock(&foo_sem);
+
+	len = simple_write_to_buffer(msg, PAGE_SIZE, ppos, buf,
+		count);
+
+	mutex_unlock(&foo_sem);
+
+	return len;
+}
 
 static ssize_t id_read(struct file *file, char __user *buf,
 	size_t count, loff_t *ppos)
@@ -42,6 +75,12 @@ static ssize_t id_write(struct file *file, char const __user *buf,
 	return len;
 }
 
+static const struct file_operations foo_fops = {
+	.owner = THIS_MODULE,
+	.read = foo_read,
+	.write = foo_write
+};
+
 static const struct file_operations id_fops = {
 	.owner = THIS_MODULE,
 	.read = id_read,
@@ -64,7 +103,6 @@ static int hello_init(void)
 	if (!debugfs_create_file("id", 0666, ret, NULL,
 		&id_fops))
 		return -ENODEV;
-
 	/*
 	 * This "jiffies" file is to be read-only by any user, and when
 	 * read,should return the current value of the jiffies kernel
@@ -73,6 +111,18 @@ static int hello_init(void)
 	if (!debugfs_create_u32("jiffies", 0444, ret, (u32 *)&t))
 		return -ENODEV;
 
+	/*
+	 * The file "foo" needs to be writable only by root, but readable by
+	 * anyone.  When writing to it, the value must be stored, up to one
+	 * page of data.  When read, which can be done by any user, the value
+	 * that is stored in it must be returned.  Properly handle the fact
+	 * that someone could be reading from the file while someone else is
+	 * writing to it (oh, a locking hint!)
+	 */
+	if (!debugfs_create_file("foo", 0644, ret, NULL,
+		&foo_fops))
+		return -ENODEV;
+
 	pr_debug("Hello, world\n");
 
 	return 0;
-- 
2.11.0

